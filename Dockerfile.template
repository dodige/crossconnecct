FROM resin/%%RESIN_MACHINE_NAME%%-debian
MAINTAINER d Odige <dodige@gmail.com>


#CMD modprobe i2c-dev && python /app/demo.py

RUN apt-get update && \
    apt-get -y install \
        build-essential \
        curl \
        git-core \
        libffi-dev \
        libssl-dev \
        matchbox \
        net-tools \
        nginx-light \
        omxplayer \
        psmisc \
        python-dev \
        python-imaging \
        python-netifaces \
        python-simplejson \
        sqlite3 \
        uzbl \
        x11-xserver-utils \
        python-croniter \
        python-dbus \
        python-dateutil \
        wget \
        cec-utils \
        gnome-schedule \
        cron \
        python-rpi.gpio \
        rpi-update \
        libpng12-dev \
        xserver-xorg && \
    apt-get clean
    
    
    
RUN apt-get dist-upgrade

RUN apt-get install git python-dev python-serial python-smbus python-jinja2 python-xmltodict python-psutil python-pip

RUN printf 'y' | rpi-update

#RUN rm /etc/nginx/sites-enabled/default
#COPY ansible/roles/ssl/files/nginx_resin.conf /etc/nginx/sites-enabled/screenly.conf

# Install Python requirements
#ADD requirements.txt /tmp/requirements.txt
RUN curl -s https://bootstrap.pypa.io/get-pip.py | python && \
    pip install xmltodict

#RUN sudo pip install xmltodict

# Screenly Websocker Server
# COPY ansible/roles/screenly/files/screenly-websocket_server_layer.service /etc/systemd/#system/screenly-websocket_server_layer.service
# RUN sed -i '/\[Service\]/ a\Environment=HOME=/data' /etc/systemd/system/screenly-#websocket_server_layer.service

# Screenly Server
# COPY ansible/roles/screenly/files/screenly-web.service /etc/systemd/system/screenly-web.service
# RUN sed -i '/\[Service\]/ a\Environment=HOME=/data' /etc/systemd/system/screenly-web.service
# RUN sed -i '/\[Service\]/ a\Environment=Environment=LISTEN=0.0.0.0' /etc/systemd/system/screenly-web.service
# RUN sed -i '/\[Service\]/ a\Environment=Environment=SWAGGER_HOST=ose.demo.screenlyapp.com' /etc/systemd/system/screenly-web.service

# X11
# COPY ansible/roles/screenly/files/X.service /etc/systemd/system/X.service

# Matchbox
# COPY ansible/roles/screenly/files/matchbox.service /etc/systemd/system/matchbox.service

#Screenly Viewer
#COPY ansible/roles/screenly/files/screenly-viewer.service /etc/systemd/system/screenly-viewer.service
#RUN sed -i '/\[Service\]/ a\Environment=HOME=/data' /etc/systemd/system/screenly-viewer.service
#RUN sed -i '/\[Service\]/ a\Environment=DISABLE_UPDATE_CHECK=True' /etc/systemd/system/screenly-viewer.service

# Enable container init system.
ENV INITSYSTEM on

# Create runtime user
RUN    useradd pi -d /home/pi \
    && /usr/sbin/usermod -a -G video pi

# Install config file and file structure
#RUN mkdir -p /home/pi/screenly
#COPY ansible/roles/screenly/files/gtkrc-2.0 /home/pi/.gtkrc-2.0
#RUN wget https://raw.githubusercontent.com/sixfab/rpiShields/master/tutorials/tutorial3/ppp-creator.sh
#RUN chmod +x ./ppp-creator.sh

#RUN ./ppp-creator.sh internet.com ttyUSB2

#COPY ./ppp-creator.sh   /home/pi
#ADD  interfaces /etc/network/
#ADD check_net /etc/cron.d
#ADD wait-dialup-hardware /etc/ppp/

####COPY entry.sh /usr/bin/entry.sh
#RUN chmod +x /usr/bin/entry.sh


ADD modules /etc/modules 
ADD rc.local /etc/rc.local
RUN chmod +x /etc/rc.local

# Copy in code base
COPY . /home/pi


RUN chown -R pi:pi /home/pi

#RUN chmod +x /home/pi/ppp-creator.sh
#RUN home/pi/ppp-creator.sh internet.com ttyUSB2
RUN chmod +x /home/pi/start.sh
RUN chmod +x /home/pi/net_tester
RUN chmod +x /home/pi/isPowerOn.sh
RUN chmod +x /home/pi/powerTvOff.sh
RUN chmod +x /home/pi/powerTvOn.sh

RUN sudo crontab /home/pi/cronfile 

#RUN chmod +x /etc/ppp/wait-dialup-hardware



WORKDIR /home/pi

RUN cd /home/pi
RUN git clone https://github.com/modmypi/PiModules.git
RUN git clone https://github.com/AndrewFromMelbourne/raspi2png.git
WORKDIR /home/pi/raspi2png
RUN make

RUN cd /home/pi/PiModules/code/python/package
WORKDIR /home/pi/PiModules/code/python/package
RUN chmod +x /home/pi/PiModules/code/python/package/setup.py
RUN  sudo python /home/pi/PiModules/code/python/package/setup.py install

RUN cd /home/pi/PiModules/code/python/upspico/picofssd
WORKDIR /home/pi/PiModules/code/python/upspico/picofssd
RUN chmod +x /home/pi/PiModules/code/python/upspico/picofssd/setup.py
RUN  sudo python /home/pi/PiModules/code/python/upspico/picofssd/setup.py install
##RUN  /home/pi/PiModules/code/python/upspico/picofssd/setup.py install
#RUN update-rc.d picofssd defaults
#RUN update-rc.d picofssd enable

RUN sudo systemctl enable picofssd.service

WORKDIR /home/pi


#CMD ["bash", "wget https://raw.githubusercontent.com/sixfab/rpiShields/master/tutorials/tutorial3/ppp-creator.sh"]
#CMD ["bash", "chmod +x ./ppp-creator.sh"]
#CMD ["bash", "./ppp-creator.sh internet.com ttyUSB3"]
#CMD ["bash", "pppd call gprs&"]
#CMD ["bash", "./local_env.sh"]
#CMD ["python", "./om2.py"]
CMD ["bash", "/home/pi//start.sh"]
